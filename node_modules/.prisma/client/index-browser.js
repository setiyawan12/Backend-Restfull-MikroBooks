
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.17.0
 * Query Engine version: 3c463ebd78b1d21d8fdacdd27899e280cf686223
 */
Prisma.prismaVersion = {
  client: "2.17.0",
  engine: "3c463ebd78b1d21d8fdacdd27899e280cf686223"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.BooksScalarFieldEnum = makeEnum({
  id_books: 'id_books',
  title: 'title',
  publisher: 'publisher',
  author: 'author',
  isbn: 'isbn',
  pages: 'pages',
  description: 'description',
  cover_books: 'cover_books',
  users_id: 'users_id',
  category_id: 'category_id',
  user: 'user'
});

exports.Prisma.BorrowScalarFieldEnum = makeEnum({
  id_borrow: 'id_borrow',
  date_start: 'date_start',
  date_end: 'date_end',
  id_books: 'id_books',
  id_users: 'id_users'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id_category: 'id_category',
  category_name: 'category_name',
  category_cover: 'category_cover'
});

exports.Prisma.DiscussScalarFieldEnum = makeEnum({
  id_discuss: 'id_discuss',
  diskusi: 'diskusi',
  books_id: 'books_id',
  id_users: 'id_users'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id_users: 'id_users',
  username: 'username',
  email: 'email',
  password: 'password',
  books: 'books'
});

exports.Prisma.RatingScalarFieldEnum = makeEnum({
  id_rating: 'id_rating',
  id_books: 'id_books',
  rating: 'rating',
  id_users: 'id_users'
});

exports.Prisma.Detail_usersScalarFieldEnum = makeEnum({
  id: 'id',
  users_id: 'users_id',
  nik: 'nik',
  users_foto: 'users_foto',
  address: 'address',
  tlp: 'tlp',
  gender: 'gender',
  birth_date: 'birth_date'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  books: 'books',
  borrow: 'borrow',
  category: 'category',
  discuss: 'discuss',
  users: 'users',
  rating: 'rating',
  detail_users: 'detail_users'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma-client-js/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
